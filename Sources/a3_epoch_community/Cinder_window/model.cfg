class cfgSkeletons
{ 
	class Default
	{
		isDiscrete=1;
		skeletonInherit="";
		skeletonBones[]={};
	};
	class cinder_window_Bones: Default
	{
		skeletonInherit = "Default";
		skeletonBones[] =
		{
			"shutter_bottom", "",
			"shutter_top", "",
			"Glass_1_hide",			"",
			"Glass_1_unhide",		""
        };
	};
};
class CfgModels
{ 
	class Default
	{
		sectionsInherit = "";
		sections[] = {};
		skeletonName = "";
	};
	class cinder_window: Default
	{
		skeletonName = "cinder_window_Bones";
		sections[] = 
		{
		  "Glass_1_hide"
		};
		sectionsInherit = "";	
 
		class Animations
		{

			class open_shutters
			{
				type = "translation";		   // Type of movement
				source="user";		           // The reference that config.cpp will use to find this animation
				selection = "shutter_top";	   //Name of the door LOD Component
				axis="axis_one";               // names axis in memory LOD
				memory = 1; 			       // whether or not the reference point appears in the memory lod
				animPeriod = 3;
			    offset0=0;                     // initial angle of the door in radians
			    offset1=0.24;                   // final position after playing the animation				
			};
			class open_shutters_bot
			{
				type = "translation";		     // Type of movement
				source="user";		             // The reference that config.cpp will use to find this animation
				selection = "shutter_bottom";		//Name of the door LOD Component
				axis="axis_one";                 // names axis in memory LOD
				memory = 1; 			         // whether or not the reference point appears in the memory lod
				animPeriod = 3;
			    offset0=0;                       // initial angle of the door in radians
			    offset1=-0.24;                    // final position after playing the animation				
			};	
			class Glass_1_hide
			{
				type			= hide;
				source			= Glass_1_source; // This source is defined in config.cpp and relates health of the window (0 = fine, 1 = destroyed)
				selection		= Glass_1_hide;   // Selection containing glass pane.
				minValue		= 0;
				maxValue		= 1;
				hideValue		= 0.99999; // Threshold for switching the glass pane for glass shards.
			};
			class Glass_1_unhide: Glass_1_hide
			{
				selection		= Glass_1_unhide; // Selection containing glass shards.
				hideValue		= 0; // Glass shards are hidden when the window is ok...
				unhideValue		= 0.99999; // ...and are shown when damage done to the window reaches set threshold.
			};
			
			
        };
	};
};